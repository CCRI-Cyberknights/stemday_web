=== ‚úÖ Existing or Updated Challenge Ideas (Post-Review) ===

01. Stego Decode            - Forensics     - Extract a flag from an image using steghide
02. Base64 Decode           - Crypto        - Decode a flag from a .txt file using Base64
03. ROT13 Puzzle            - Crypto        - Flag is encoded using ROT13; includes helper script
04. Vigen√®re Decrypt        - Crypto        - Given ciphertext and keyword, decrypt using helper script
05. Archive Password        - Forensics     - A ZIP file contains the flag, but the password is given elsewhere
06. Hashcat Crack           - Crypto        - Use preconfigured hashcat to crack an MD5 password with rockyou.txt
07. Extract from Binary     - Forensics     - Use strings on a binary file to find a readable flag
08. Fake Auth Log           - Forensics     - Spot the login anomaly in a fake auth.log file
09. Fix the Script          - Reverse Eng.  - Examine a broken script, fix the logic, and reveal a flag
10. Metadata Flag           - Forensics     - Flag hidden in image metadata (via exiftool)
11. Hidden Flag             - Recon         - Use a helper script to search for a hidden file (e.g. .flag)
12. HTML Source Sleuth      - Recon         - Flag in HTML comment or hidden element in index.html
13. Whois Detective         - Recon         - Search through whois.txt dump for the domain that has the flag
14. DNS Zone Reveal         - Recon         - Simulated zone file includes TXT record with the flag
15. ICMP Payload Read       - Forensics     - Hex dump of ICMP payload contains readable ASCII flag
16. Caesar Cipher Cracker   - Crypto        - Script shows all 25 Caesar shifts; user spots readable flag
17. PDF with Hidden Text    - Forensics     - Flag embedded in invisible text inside a PDF
18. QR Code Decode          - Recon         - Flag is in a QR code image, decoded visually or with a script
19. Suspicious Login Log    - Forensics     - Fake password log contains the correct password once
20. Command Injection Sim   - Exploitation  - Script with insecure input reveals flag when command injection used

=== üß™ Additional NCL/NCAE-Inspired Challenge Concepts ===

- FTP Banner Recon          - Simulated FTP banner contains version and embedded flag clue
- Robots.txt Trap           - Explore a robots.txt file to find a disallowed flag location
- Password Reuse Log        - Analyze logins and reused passwords to uncover flag
- SHA256 Hash Match         - Match SHA256 hash with known list to extract flag
- SUID Check (Simulated)    - Review fake permissions and identify dangerous SUID binary
- Crontab Suspicion         - Fake crontab with a hint about where to look for the flag
- Environment Variable Hunt - Echo environment variable to get the flag (optional simplified)
- Directory Traversal Sim   - Discover flag in parent directory via traversal clue
- Cracked CAPTCHA Image     - Simple OCR/decode of very readable CAPTCHA image
- Social Media Leak         - Flag embedded in mock ‚Äúpost‚Äù from fake Twitter/Instagram dump
- Spectrogram Audio Flag    - Audio file visualized to reveal embedded flag (advanced)
- Corrupted Image Fix       - PNG with broken header, user ‚Äúrepairs‚Äù it and views flag

### üóù **Cryptography**
1. **ROT47 Decoder**
   * A message is scrambled using ROT47 instead of ROT13. Students decode it with a Python one-liner or online tool.
2. **XOR Cipher Puzzle**
   * Students find a key hidden in a hint file and use it to XOR-decrypt a message.
3. **Substitution Cipher**
   * An old-school cipher.txt that requires frequency analysis to figure out.
---

### üîë **Password Cracking**
4. **ZIP Archive Bruteforce**
   * A password-protected ZIP with the flag inside. Students use `fcrackzip` or a script to crack it.
5. **Shadow File Puzzle**
   * A fake `/etc/shadow` is provided. Students use `john` to crack the hashed password.
6. **Simple Web Login Bypass**
   * A login form vulnerable to bypass with a common admin password like `admin:admin` or an empty password.

---

### üî¨ **Forensics**
7. **Hidden Image in Audio File**
   * An `.mp3` file with an image hidden inside using `steghide`.
8. **Hex Viewer Challenge**
   * A binary contains the flag embedded in plain text. Students use `xxd` or `hexedit` to find it.

---

### üìú **Log Analysis**
9. **Anomalous Login Detection**
   * Students analyze `auth.log` for a suspicious login (wrong PID or odd time).
10. **Web Server Logs**
    * A fake `access.log` shows someone accessing `/flag.txt`. Students find the IP and file path.

---

### üåê **Network Traffic Analysis**
11. **Analyze PCAP for HTTP Flag**
    * Flag transmitted over HTTP in plain text inside a `.pcap`. Students use Wireshark to extract it.
12. **FTP Password Recovery**
    * A `.pcap` file shows an FTP login. Students pull the credentials from the capture.

---

### üîé **Scanning & Reconnaissance**
13. **robots.txt Recon**
    * A fake website has a `robots.txt` file revealing `/super-secret/flag.txt`.
14. **Nmap Scan Puzzle**
    * Students scan a local simulated service to find an open port serving a flag.

---

### üñ• **Web Application Exploitation**
15. **Reflected XSS**
    * A fake web form reflects input unsanitized. Students use `<script>` to trigger an alert (flag appears in the alert).
16. **SQL Injection**
    * A vulnerable login lets students bypass authentication with `OR '1'='1'`.

---

### üì∂ **Wireless Access**
17. **WPA2 Handshake Crack**
    * A `.cap` file contains a captured handshake. Students run `aircrack-ng` with a wordlist to recover the password.

---

### üõ† **Enumeration & Exploitation**
18. **SUID Binary Exploit**
    * A SUID binary has a weak command that allows privilege escalation to read a protected flag file.
19. **Find Hidden Files**
    * Students use `find` or `ls -la` to discover a hidden `.flag` file.
20. **World-Writable File Exploit**
    * A file has world-writable permissions allowing students to overwrite and reveal the flag.
